"use strict";(self.webpackChunkditsmod_github_io=self.webpackChunkditsmod_github_io||[]).push([[652],{1592:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>a});var i=t(4848),s=t(5680);const o={slug:"/",sidebar_position:1},r="Introduction",d={id:"intro",title:"Introduction",description:"About the project",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/intro.md",sourceDirName:".",slug:"/",permalink:"/en/",draft:!1,unlisted:!1,editUrl:"https://github.com/ditsmod/ditsmod/edit/main/website/i18n/en/docusaurus-plugin-content-docs/current/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/",sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Modules",permalink:"/en/components-of-ditsmod-app/module"}},c={},a=[{value:"About the project",id:"about-the-project",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Start in Development Mode",id:"start-in-development-mode",level:2},{value:"Start in product mode",id:"start-in-product-mode",level:2},{value:"Entry file for Node.js",id:"entry-file-for-nodejs",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.RP)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.h2,{id:"about-the-project",children:"About the project"}),"\n",(0,i.jsxs)(n.p,{children:["Ditsmod is a Node.js web framework, named ",(0,i.jsx)(n.strong,{children:"DI"})," + ",(0,i.jsx)(n.strong,{children:"TS"})," + ",(0,i.jsx)(n.strong,{children:"Mod"})," to emphasize its important components: it has ",(0,i.jsx)(n.strong,{children:"D"}),"ependency ",(0,i.jsx)(n.strong,{children:"I"}),"njection, written in ",(0,i.jsx)(n.strong,{children:"T"}),"ype",(0,i.jsx)(n.strong,{children:"S"}),"cript, and designed for good ",(0,i.jsx)(n.strong,{children:"Mod"}),"ularity."]}),"\n",(0,i.jsx)(n.p,{children:"The main features of Ditsmod:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Modular architecture on decorators, which allows you to declaratively describe the structure of the application."}),"\n",(0,i.jsxs)(n.li,{children:["A convenient mechanism for ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Dependency_injection",children:"specifying and resolving dependencies"}),' between different classes: you specify the instances of which classes you need in the constructor, and DI does the hard work of "how to get them".']}),"\n",(0,i.jsx)(n.li,{children:"Ability to write your own extensions (sometimes called plugins) that can be asynchronously initialized and that can depend on each other."}),"\n",(0,i.jsx)(n.li,{children:"Ability to dynamically add and remove modules after starting the web server, without the need to restart."}),"\n",(0,i.jsx)(n.li,{children:"Has OpenAPI support, and has the ability to validate queries based on OpenAPI metadata."}),"\n",(0,i.jsxs)(n.li,{children:["To date, ",(0,i.jsx)(n.a,{href:"https://github.com/ditsmod/vs-webframework#readme",children:"Ditsmod is one of the fastest"})," among Node.js web frameworks."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Some concepts of Ditsmod architecture are taken from Angular concepts, and DI is built based on the native Angular DI module."}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"Please make sure that Node.js >= v18.14.0 is installed on your operating system."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["The basic set for running the application has a repository ",(0,i.jsx)(n.a,{href:"https://github.com/ditsmod/seed",children:"ditsmod/seed"}),". Clone it and install the dependencies:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone --depth 1 https://github.com/ditsmod/seed.git my-app\ncd my-app\nnpm i\n"})}),"\n",(0,i.jsx)(n.p,{children:"Alternatively, you can use the starter monorepo:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone --depth 1 https://github.com/ditsmod/monorepo.git my-app\ncd my-app\nnpm i\n"})}),"\n",(0,i.jsx)(n.h2,{id:"start-in-development-mode",children:"Start in Development Mode"}),"\n",(0,i.jsx)(n.p,{children:"For development mode, you'll need two terminals. In one, TypeScript code will be compiled into JavaScript code, and in the other, a web server will be running. After each code change, the web server will pick up these changes and reload."}),"\n",(0,i.jsx)(n.p,{children:"Command for the first terminal:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run watch\n"})}),"\n",(0,i.jsx)(n.p,{children:"Command for the second terminal:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm start\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can check the server operation using ",(0,i.jsx)(n.code,{children:"curl"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl -i localhost:3000\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Or simply by going to ",(0,i.jsx)(n.a,{href:"http://localhost:3000/",children:"http://localhost:3000/"})," in your browser."]}),"\n",(0,i.jsxs)(n.p,{children:["Of course, instead of two terminals, you can use, for example, ",(0,i.jsx)(n.a,{href:"https://github.com/TypeStrong/ts-node",children:"ts-node"})," in one terminal, but this is a slower option, because after each change ",(0,i.jsx)(n.code,{children:"ts-node"})," will recompile all the code on the fly, while in ",(0,i.jsx)(n.code,{children:"tsc -w"})," only recompiles the changed file. In addition, thanks to ",(0,i.jsx)(n.a,{href:"https://github.com/ditsmod/seed",children:"ditsmod/seed"}),"'s use of the so-called ",(0,i.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/project-references.html",children:"Project References"})," and ",(0,i.jsx)(n.code,{children:"tsc -b"})," build mode, even very large projects compile very quickly."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that there are four config files for TypeScript in the ",(0,i.jsx)(n.code,{children:"ditsmod/seed"})," repository:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tsconfig.json"})," - the basic configuration used by your IDE (in most cases it is probably VS Code)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tsconfig.build.json"})," - this configuration is used to compile the code from the ",(0,i.jsx)(n.code,{children:"src"})," directory to the ",(0,i.jsx)(n.code,{children:"dist"})," directory, it is intended for application code."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tsconfig.test.json"})," - this configuration is used to compile end-to-end tests."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tsconfig.unit.json"})," - this configuration is used to compile unit tests."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Also, note that since ",(0,i.jsx)(n.code,{children:"ditsmod/seed"})," is declared as an EcmaScript Module (ESM), you can use ",(0,i.jsx)(n.a,{href:"https://nodejs.org/api/packages.html#imports",children:"native Node.js aliases"})," to shorten file paths. This is analogous to ",(0,i.jsx)(n.code,{children:"compilerOptions.paths"})," in ",(0,i.jsx)(n.code,{children:"tsconfig"}),". Such aliases are declared in ",(0,i.jsx)(n.code,{children:"package.json"})," in the ",(0,i.jsx)(n.code,{children:"imports"})," field:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"{2}",children:'"imports": {\n  "#app/*": "./dist/app/*"\n},\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Now you can use it, for example in the ",(0,i.jsx)(n.code,{children:"test"})," folder, like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { AppModule } from '#app/app.module.js';\n"})}),"\n",(0,i.jsxs)(n.p,{children:["At the moment (2023-10-13) TypeScript does not yet fully support these aliases, so it is advisable to duplicate them in the ",(0,i.jsx)(n.code,{children:"tsconfig.json"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// ...\n  "paths": {\n    "#app/*": ["./src/app/*"]\n  }\n// ...\n'})}),"\n",(0,i.jsxs)(n.p,{children:["There is no point in doing this in other ",(0,i.jsx)(n.code,{children:"tsconfig"})," files because it is only needed by your code editor. Note that in ",(0,i.jsx)(n.code,{children:"package.json"})," the aliases point to ",(0,i.jsx)(n.code,{children:"dist"}),", while in ",(0,i.jsx)(n.code,{children:"tsconfig.json"})," they point to ",(0,i.jsx)(n.code,{children:"src"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"start-in-product-mode",children:"Start in product mode"}),"\n",(0,i.jsx)(n.p,{children:"The application is compiled and the server is started in product mode using the command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run build\nnpm run start-prod\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In addition, you can view more examples in the ",(0,i.jsx)(n.a,{href:"https://github.com/ditsmod/ditsmod/tree/main/examples",children:"examples"})," folder, as well as in the repository ",(0,i.jsx)(n.a,{href:"https://github.com/ditsmod/realworld",children:"RealWorld"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"entry-file-for-nodejs",children:"Entry file for Node.js"}),"\n",(0,i.jsxs)(n.p,{children:["After ",(0,i.jsx)(n.a,{href:"#install-the-ditsmod-seed",children:"installing Ditsmod seed"}),", the first thing you need to know: all the application code is in the ",(0,i.jsx)(n.code,{children:"src"})," folder, it is compiled using the TypeScript utility ",(0,i.jsx)(n.code,{children:"tsc"}),", after compilation it goes to the ",(0,i.jsx)(n.code,{children:"dist"})," folder, and then as JavaScript code it can be executed in Node.js."]}),"\n",(0,i.jsxs)(n.p,{children:["Let's look at the ",(0,i.jsx)(n.code,{children:"src/main.ts"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { Application } from '@ditsmod/core';\nimport { AppModule } from './app/app.module.js';\n\nconst app = await new Application().bootstrap(AppModule);\napp.server.listen(3000, '0.0.0.0');\n"})}),"\n",(0,i.jsxs)(n.p,{children:["After compilation, it becomes ",(0,i.jsx)(n.code,{children:"dist/main.js"})," and becomes the entry point for running the application in production mode, and so why you will specify it as an argument to Node.js:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"node dist/main.js\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Looking at the file ",(0,i.jsx)(n.code,{children:"src/main.ts"}),", you can see that an instance of the class ",(0,i.jsx)(n.code,{children:"Application"})," is created, and as an argument for the method ",(0,i.jsx)(n.code,{children:"bootstrap()"})," is passed ",(0,i.jsx)(n.code,{children:"AppModule"}),". Here ",(0,i.jsx)(n.code,{children:"AppModule"})," is the root module to which other application modules then imports."]})]})}function h(e={}){const{wrapper:n}={...(0,s.RP)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},5680:(e,n,t)=>{t.d(n,{RP:()=>a});var i=t(6540);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,i,s=function(e,n){if(null==e)return{};var t,i,s={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=i.createContext({}),a=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},l={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,h=d(e,["components","mdxType","originalType","parentName"]),p=a(t),u=s,m=p["".concat(c,".").concat(u)]||p[u]||l[u]||o;return t?i.createElement(m,r(r({ref:n},h),{},{components:t})):i.createElement(m,r({ref:n},h))}));h.displayName="MDXCreateElement"}}]);