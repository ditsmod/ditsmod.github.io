"use strict";(self.webpackChunkditsmod_github_io=self.webpackChunkditsmod_github_io||[]).push([[600],{8493:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"components-of-ditsmod-app/guards","title":"Guards","description":"If you want to restrict access to certain routes, you can use guards. You can view a finished example of an application with guards in the examples folder or in RealWorld example.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/00-components-of-ditsmod-app/05-guards.md","sourceDirName":"00-components-of-ditsmod-app","slug":"/components-of-ditsmod-app/guards","permalink":"/en/components-of-ditsmod-app/guards","draft":false,"unlisted":false,"editUrl":"https://github.com/ditsmod/ditsmod/edit/main/website/i18n/en/docusaurus-plugin-content-docs/current/00-components-of-ditsmod-app/05-guards.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"HTTP Interceptors","permalink":"/en/components-of-ditsmod-app/http-interceptors"},"next":{"title":"Extensions","permalink":"/en/components-of-ditsmod-app/extensions"}}');var n=r(4848),o=r(8453);const i={sidebar_position:5},a="Guards",d={},c=[{value:"Passing guards to injectors",id:"passing-guards-to-injectors",level:2},{value:"Use of guards",id:"use-of-guards",level:2},{value:"Guards with parameters",id:"guards-with-parameters",level:2},{value:"Helpers for guards with parameters",id:"helpers-for-guards-with-parameters",level:2},{value:"Setting guards on the imported module",id:"setting-guards-on-the-imported-module",level:2}];function l(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"guards",children:"Guards"})}),"\n",(0,n.jsxs)(s.p,{children:["If you want to restrict access to certain routes, you can use guards. You can view a finished example of an application with guards in the ",(0,n.jsx)(s.a,{href:"https://github.com/ditsmod/ditsmod/tree/main/examples/03-route-guards",children:"examples"})," folder or in ",(0,n.jsx)(s.a,{href:"https://github.com/ditsmod/realworld/blob/main/packages/server/src/app/modules/service/auth/bearer.guard.ts",children:"RealWorld example"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["Any guard is a ",(0,n.jsx)(s.a,{href:"/components-of-ditsmod-app/dependency-injection#injector-and-providers",children:"DI provider"})," passed to injectors at the request level ",(0,n.jsx)(s.a,{href:"/components-of-ditsmod-app/controllers-and-services/#what-is-a-controller",children:"in injector-scope mode"}),", or at other levels if the controller is in context-scoped mode. Each guard must be a class that implements the ",(0,n.jsx)(s.code,{children:"CanActivate"})," interface:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"interface CanActivate {\n  canActivate(ctx: RequestContext, params?: any[]): boolean | Response | Promise<boolean | Response>;\n}\n"})}),"\n",(0,n.jsx)(s.p,{children:"For example, it can be done like this:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:"{8-10}",children:"import { guard, RequestContext, CanActivate } from '@ditsmod/rest';\nimport { AuthService } from './auth.service.js';\n\n@guard()\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService) {}\n\n  async canActivate(ctx: RequestContext, params?: any[]) {\n    return Boolean(await this.authService.updateAndGetSession());\n  }\n}\n"})}),"\n",(0,n.jsx)(s.p,{children:"Or like this:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:"{11-17}",children:"import { Status } from '@ditsmod/core';\nimport { RequestContext, CanActivate, guard } from '@ditsmod/rest';\n\nimport { AuthService } from './auth.service.js';\nimport { Permission } from './types.js';\n\n@guard()\nexport class PermissionsGuard implements CanActivate {\n  constructor(private authService: AuthService) {}\n\n  async canActivate(ctx: RequestContext, params?: Permission[]) {\n    if (await this.authService.hasPermissions(params)) {\n      return true;\n    } else {\n      return new Response(null, { status: Status.FORBIDDEN });\n    }\n  }\n}\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Note that guards can return an instance of the standard ",(0,n.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Response",children:"Response"})," class."]}),"\n",(0,n.jsxs)(s.p,{children:["It is recommended that guard files end with ",(0,n.jsx)(s.code,{children:"*.guard.ts"})," and their class names end with ",(0,n.jsx)(s.code,{children:"*Guard"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["If ",(0,n.jsx)(s.code,{children:"canActivate()"})," returns:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"true"})," or ",(0,n.jsx)(s.code,{children:"Promise<true>"}),", means Ditsmod will process the corresponding route with this guard;"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"false"})," or ",(0,n.jsx)(s.code,{children:"Promise<false>"}),", so the response to the request will contain a 401 status and the controller will not process the route;"]}),"\n",(0,n.jsxs)(s.li,{children:["an instance of ",(0,n.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Response",children:"Response"})," or ",(0,n.jsx)(s.code,{children:"Promise<Response>"}),", which in this context Ditsmod interprets as a response to an HTTP request."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"passing-guards-to-injectors",children:"Passing guards to injectors"}),"\n",(0,n.jsx)(s.p,{children:"Guards can be passed in module or controller metadata:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:"{5}",children:"import { restModule } from '@ditsmod/rest';\nimport { AuthGuard } from 'auth.guard';\n\n@restModule({\n  providersPerReq: [AuthGuard],\n})\nexport class SomeModule {}\n"})}),"\n",(0,n.jsx)(s.p,{children:"In this case, the guard will work at the request level, for controllers in injector-scoped mode."}),"\n",(0,n.jsx)(s.h2,{id:"use-of-guards",children:"Use of guards"}),"\n",(0,n.jsxs)(s.p,{children:["If you use the ",(0,n.jsx)(s.code,{children:"@ditsmod/rest"})," module, the guards are passed to the controllers in an array in the third parameter of the ",(0,n.jsx)(s.code,{children:"route"})," decorator:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:"{6}",children:"import { controller, Res, route } from '@ditsmod/rest';\nimport { AuthGuard } from './auth.guard.js';\n\n@controller()\nexport class SomeController {\n  @route('GET', 'some-url', [AuthGuard])\n  tellHello(res: Res) {\n    res.send('Hello, admin!');\n  }\n}\n"})}),"\n",(0,n.jsx)(s.h2,{id:"guards-with-parameters",children:"Guards with parameters"}),"\n",(0,n.jsxs)(s.p,{children:["The guard in the ",(0,n.jsx)(s.code,{children:"canActivate()"})," method has two parameters. The arguments for the first parameter are automatically passed with the ",(0,n.jsx)(s.code,{children:"RequestContext"})," datatype, and the arguments for the second parameter can be passed to the ",(0,n.jsx)(s.code,{children:"route"})," decorator in an array where a certain guard comes first."]}),"\n",(0,n.jsx)(s.p,{children:"Let's consider such an example:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:"{8}",children:"import { controller, Res, route } from '@ditsmod/rest';\n\nimport { PermissionsGuard } from './permissions.guard.js';\nimport { Permission } from './permission.js';\n\n@controller()\nexport class SomeController {\n  @route('GET', 'some-url', [[PermissionsGuard, Permission.canActivateAdministration]])\n  tellHello(res: Res) {\n    res.send('Hello, admin!');\n  }\n}\n"})}),"\n",(0,n.jsxs)(s.p,{children:["As you can see, in place of the third parameter in ",(0,n.jsx)(s.code,{children:"route"}),", an array is passed in an array, where ",(0,n.jsx)(s.code,{children:"PermissionsGuard"})," is specified in the first place, followed by arguments for it. In this case, ",(0,n.jsx)(s.code,{children:"PermissionsGuard"})," will receive these arguments in its ",(0,n.jsx)(s.code,{children:"canActivate()"})," method:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:"{11}",children:"import { injectable, Status } from '@ditsmod/core';\nimport { CanActivate, RequestContext } from '@ditsmod/rest';\n\nimport { AuthService } from './auth.service.js';\nimport { Permission } from './permission.js';\n\n@injectable()\nexport class PermissionsGuard implements CanActivate {\n  constructor(private authService: AuthService) {}\n\n  async canActivate(ctx: RequestContext, params?: Permission[]) {\n    if (await this.authService.hasPermissions(params)) {\n      return true;\n    } else {\n      return new Response(null, { status: Status.FORBIDDEN });\n    }\n  }\n}\n"})}),"\n",(0,n.jsx)(s.h2,{id:"helpers-for-guards-with-parameters",children:"Helpers for guards with parameters"}),"\n",(0,n.jsxs)(s.p,{children:["Because parameter guards must be passed as an array within an array, this makes readability and type safety worse. For such cases, it is better to create a helper using the ",(0,n.jsx)(s.code,{children:"createHelperForGuardWithParams()"})," factory:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:"{5}",children:"import { createHelperForGuardWithParams } from '@ditsmod/rest';\nimport { Permission } from './types.js';\nimport { PermissionsGuard } from './permissions-guard.js';\n\nexport const requirePermissions = createHelperForGuardWithParams<Permission>(PermissionsGuard);\n"})}),"\n",(0,n.jsxs)(s.p,{children:["In this example, ",(0,n.jsx)(s.code,{children:"PermissionsGuard"})," is passed as an argument, which accepts parameters of type ",(0,n.jsx)(s.code,{children:"Permission"})," in its ",(0,n.jsx)(s.code,{children:"canActivate()"})," method."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"requirePermissions()"})," can now be used to create routes:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:"{8}",children:"import { controller, Res, route } from '@ditsmod/rest';\n\nimport { requirePermissions } from '../auth/guards-utils.js';\nimport { Permission } from '../auth/types.js';\n\n@controller()\nexport class SomeController {\n  @route('GET', 'administration', [requirePermissions(Permission.canActivateAdministration)])\n  helloAdmin(res: Res) {\n    res.send('some secret');\n  }\n}\n"})}),"\n",(0,n.jsx)(s.h2,{id:"setting-guards-on-the-imported-module",children:"Setting guards on the imported module"}),"\n",(0,n.jsx)(s.p,{children:"You can also centrally set guards at the module level:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",metastring:"{10}",children:"import { restModule } from '@ditsmod/rest';\n\nimport { OtherModule } from '../other/other.module.js';\nimport { AuthModule } from '../auth/auth.module.js';\nimport { AuthGuard } from '../auth/auth.guard.js';\n\n@restModule({\n  imports: [\n    AuthModule, \n    { module: OtherModule, path: '', guards: [AuthGuard] },\n  ],\n})\nexport class SomeModule {}\n"})}),"\n",(0,n.jsxs)(s.p,{children:["In this case, ",(0,n.jsx)(s.code,{children:"AuthGuard"})," will be automatically added to each route in ",(0,n.jsx)(s.code,{children:"OtherModule"}),". Note that the providers for the specified guard must provide the ",(0,n.jsx)(s.code,{children:"SomeModule"}),", which is why it imports the ",(0,n.jsx)(s.code,{children:"AuthModule"}),"."]})]})}function u(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>a});var t=r(6540);const n={},o=t.createContext(n);function i(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);