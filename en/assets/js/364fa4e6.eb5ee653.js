"use strict";(self.webpackChunkditsmod_github_io=self.webpackChunkditsmod_github_io||[]).push([[600],{4281:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=s(4848),n=s(8453);const o={sidebar_position:5},a="Guards",i={id:"components-of-ditsmod-app/guards",title:"Guards",description:"If you want to restrict access to certain routes, you can use guards. You can view a finished example of an application with guards in the examples folder or in RealWorld example.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/00-components-of-ditsmod-app/05-guards.md",sourceDirName:"00-components-of-ditsmod-app",slug:"/components-of-ditsmod-app/guards",permalink:"/en/components-of-ditsmod-app/guards",draft:!1,unlisted:!1,editUrl:"https://github.com/ditsmod/ditsmod/edit/main/website/i18n/en/docusaurus-plugin-content-docs/current/00-components-of-ditsmod-app/05-guards.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"HTTP Interceptors",permalink:"/en/components-of-ditsmod-app/http-interceptors"},next:{title:"Extensions",permalink:"/en/components-of-ditsmod-app/extensions"}},d={},c=[{value:"Use of guards",id:"use-of-guards",level:2},{value:"Guards with parameters",id:"guards-with-parameters",level:2},{value:"Helpers for guards with parameters",id:"helpers-for-guards-with-parameters",level:2},{value:"Passing guards to injectors",id:"passing-guards-to-injectors",level:2},{value:"Setting guards on the imported module",id:"setting-guards-on-the-imported-module",level:2}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"guards",children:"Guards"}),"\n",(0,t.jsxs)(r.p,{children:["If you want to restrict access to certain routes, you can use guards. You can view a finished example of an application with guards in the ",(0,t.jsx)(r.a,{href:"https://github.com/ditsmod/ditsmod/tree/main/examples/03-route-guards",children:"examples"})," folder or in ",(0,t.jsx)(r.a,{href:"https://github.com/ditsmod/realworld/blob/main/packages/server/src/app/modules/service/auth/bearer.guard.ts",children:"RealWorld example"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["Any guard is a ",(0,t.jsx)(r.a,{href:"/components-of-ditsmod-app/dependency-injection#providers",children:"DI provider"})," passed to injectors at the request level (if the controller is ",(0,t.jsx)(r.a,{href:"/components-of-ditsmod-app/controllers-and-services/#what-is-a-controller",children:"non-singleton"}),"), or at other levels (if the controller is singleton). Each guard must be a class that implements the ",(0,t.jsx)(r.code,{children:"CanActivate"})," interface:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"interface CanActivate {\n  canActivate(ctx: RequestContext, params?: any[]): boolean | number | Promise<boolean | number>;\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"For example, it can be done like this:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:"{8-10}",children:"import { guard, CanActivate, RequestContext } from '@ditsmod/core';\nimport { AuthService } from './auth.service.js';\n\n@guard({ isSingleton: false })\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService) {}\n\n  async canActivate(ctx: RequestContext, params?: any[]) {\n    return Boolean(await this.authService.updateAndGetSession());\n  }\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["It is recommended that guard files end with ",(0,t.jsx)(r.code,{children:"*.guard.ts"})," and their class names end with ",(0,t.jsx)(r.code,{children:"*Guard"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["If ",(0,t.jsx)(r.code,{children:"canActivate()"})," returns:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"true"})," or ",(0,t.jsx)(r.code,{children:"Promise<true>"}),", means Ditsmod will process the corresponding route with this guard;"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"false"})," or ",(0,t.jsx)(r.code,{children:"Promise<false>"}),", so the response to the request will contain a 401 status and the controller will not process the route;"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"number"})," or ",(0,t.jsx)(r.code,{children:"Promise<number>"})," is interpreted by Ditsmod as a status number (403, 401, etc.) that should be returned in response to an HTTP request."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"use-of-guards",children:"Use of guards"}),"\n",(0,t.jsxs)(r.p,{children:["The guards are passed to the controllers in the array in the third parameter of the ",(0,t.jsx)(r.code,{children:"route"})," decorator:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:"{6}",children:"import { controller, Res, route } from '@ditsmod/core';\nimport { AuthGuard } from './auth.guard.js';\n\n@controller()\nexport class SomeController {\n  @route('GET', 'some-url', [AuthGuard])\n  tellHello(res: Res) {\n    res.send('Hello, admin!');\n  }\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"guards-with-parameters",children:"Guards with parameters"}),"\n",(0,t.jsxs)(r.p,{children:["The guard in the ",(0,t.jsx)(r.code,{children:"canActivate()"})," method has two parameters. The arguments for the first parameter are automatically passed with the ",(0,t.jsx)(r.code,{children:"RequestContext"})," datatype, and the arguments for the second parameter can be passed to the ",(0,t.jsx)(r.code,{children:"route"})," decorator in an array where a certain guard comes first."]}),"\n",(0,t.jsx)(r.p,{children:"Let's consider such an example:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:"{8}",children:"import { controller, Res, route } from '@ditsmod/core';\n\nimport { PermissionsGuard } from './permissions.guard.js';\nimport { Permission } from './permission.js';\n\n@controller()\nexport class SomeController {\n  @route('GET', 'some-url', [[PermissionsGuard, Permission.canActivateAdministration]])\n  tellHello(res: Res) {\n    res.send('Hello, admin!');\n  }\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["As you can see, in place of the third parameter in ",(0,t.jsx)(r.code,{children:"route"}),", an array is passed in an array, where ",(0,t.jsx)(r.code,{children:"PermissionsGuard"})," is specified in the first place, followed by arguments for it. In this case, ",(0,t.jsx)(r.code,{children:"PermissionsGuard"})," will receive these arguments in its ",(0,t.jsx)(r.code,{children:"canActivate()"})," method:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:"{10}",children:"import { injectable, CanActivate, Status, RequestContext } from '@ditsmod/core';\n\nimport { AuthService } from './auth.service.js';\nimport { Permission } from './permission.js';\n\n@injectable()\nexport class PermissionsGuard implements CanActivate {\n  constructor(private authService: AuthService) {}\n\n  async canActivate(ctx: RequestContext, params?: Permission[]) {\n    if (await this.authService.hasPermissions(params)) {\n      return true;\n    } else {\n      return Status.FORBIDDEN;\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"helpers-for-guards-with-parameters",children:"Helpers for guards with parameters"}),"\n",(0,t.jsxs)(r.p,{children:["Because parameter guards must be passed as an array within an array, this makes readability and type safety worse. For such cases, it is better to create a helper using the ",(0,t.jsx)(r.code,{children:"createHelperForGuardWithParams()"})," factory:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:"{5}",children:"import { createHelperForGuardWithParams } from '@ditsmod/core';\nimport { Permission } from './types.js';\nimport { PermissionsGuard } from './permissions-guard.js';\n\nexport const requirePermissions = createHelperForGuardWithParams<Permission>(PermissionsGuard);\n"})}),"\n",(0,t.jsxs)(r.p,{children:["In this example, ",(0,t.jsx)(r.code,{children:"PermissionsGuard"})," is passed as an argument, which accepts parameters of type ",(0,t.jsx)(r.code,{children:"Permission"})," in its ",(0,t.jsx)(r.code,{children:"canActivate()"})," method."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"requirePermissions()"})," can now be used to create routes:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:"{8}",children:"import { controller, Res, route } from '@ditsmod/core';\n\nimport { requirePermissions } from '../auth/guards-utils.js';\nimport { Permission } from '../auth/types.js';\n\n@controller()\nexport class SomeController {\n  @route('GET', 'administration', [requirePermissions(Permission.canActivateAdministration)])\n  helloAdmin(res: Res) {\n    res.send('some secret');\n  }\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"passing-guards-to-injectors",children:"Passing guards to injectors"}),"\n",(0,t.jsx)(r.p,{children:"Guards can be passed in module or controller metadata:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:"{6}",children:"import { featureModule } from '@ditsmod/core';\n\nimport { AuthGuard } from 'auth.guard';\n\n@featureModule({\n  providersPerReq: [AuthGuard],\n})\nexport class SomeModule {}\n"})}),"\n",(0,t.jsx)(r.p,{children:"In this case, the guard will work at the request level, for non-singleton controllers."}),"\n",(0,t.jsx)(r.h2,{id:"setting-guards-on-the-imported-module",children:"Setting guards on the imported module"}),"\n",(0,t.jsx)(r.p,{children:"You can also centrally set guards at the module level:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",metastring:"{10}",children:"import { featureModule } from '@ditsmod/core';\n\nimport { OtherModule } from '../other/other.module.js';\nimport { AuthModule } from '../auth/auth.module.js';\nimport { AuthGuard } from '../auth/auth.guard.js';\n\n@featureModule({\n  imports: [\n    AuthModule,\n    { path: 'some-path', module: OtherModule, guards: [AuthGuard] }\n  ]\n})\nexport class SomeModule {}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["In this case, ",(0,t.jsx)(r.code,{children:"AuthGuard"})," will be automatically added to each route in ",(0,t.jsx)(r.code,{children:"OtherModule"}),"."]})]})}function u(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>a,x:()=>i});var t=s(6540);const n={},o=t.createContext(n);function a(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);