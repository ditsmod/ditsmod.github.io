"use strict";(self.webpackChunkditsmod_github_io=self.webpackChunkditsmod_github_io||[]).push([[600],{4281:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var s=t(4848),n=t(5680);const o={sidebar_position:5},a="Guards",i={id:"components-of-ditsmod-app/guards",title:"Guards",description:"If you want to restrict access to certain routes, you can use guards. You can view a finished example of an application with guards in the examples folder or in RealWorld example.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/00-components-of-ditsmod-app/05-guards.md",sourceDirName:"00-components-of-ditsmod-app",slug:"/components-of-ditsmod-app/guards",permalink:"/en/components-of-ditsmod-app/guards",draft:!1,unlisted:!1,editUrl:"https://github.com/ditsmod/ditsmod/edit/main/website/i18n/en/docusaurus-plugin-content-docs/current/00-components-of-ditsmod-app/05-guards.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"HTTP Interceptors",permalink:"/en/components-of-ditsmod-app/http-interceptors"},next:{title:"Extensions",permalink:"/en/components-of-ditsmod-app/extensions"}},d={},c=[{value:"Use of guards",id:"use-of-guards",level:2},{value:"Guards with parameters",id:"guards-with-parameters",level:2},{value:"Helpers for guards with parameters",id:"helpers-for-guards-with-parameters",level:2},{value:"Passing guards to injectors",id:"passing-guards-to-injectors",level:2},{value:"Setting guards on the imported module",id:"setting-guards-on-the-imported-module",level:2}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.RP)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"guards",children:"Guards"}),"\n",(0,s.jsxs)(r.p,{children:["If you want to restrict access to certain routes, you can use guards. You can view a finished example of an application with guards in the ",(0,s.jsx)(r.a,{href:"https://github.com/ditsmod/ditsmod/tree/main/examples/03-route-guards",children:"examples"})," folder or in ",(0,s.jsx)(r.a,{href:"https://github.com/ditsmod/realworld/blob/main/packages/server/src/app/modules/service/auth/bearer.guard.ts",children:"RealWorld example"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["Any guard is a ",(0,s.jsx)(r.a,{href:"/components-of-ditsmod-app/dependency-injection#providers",children:"DI provider"})," passed to injectors at the request level (if the controller is ",(0,s.jsx)(r.a,{href:"/components-of-ditsmod-app/controllers-and-services/#what-is-a-controller",children:"non-singleton"}),"), or at other levels (if the controller is singleton). Each guard must be a class that implements the ",(0,s.jsx)(r.code,{children:"CanActivate"})," interface:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"interface CanActivate {\n  canActivate(ctx: RequestContext, params?: any[]): boolean | number | Promise<boolean | number>;\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"For example, it can be done like this:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:"{8-10}",children:"import { guard, CanActivate, RequestContext } from '@ditsmod/core';\nimport { AuthService } from './auth.service.js';\n\n@guard({ isSingleton: false })\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService) {}\n\n  async canActivate(ctx: RequestContext, params?: any[]) {\n    return Boolean(await this.authService.updateAndGetSession());\n  }\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["It is recommended that guard files end with ",(0,s.jsx)(r.code,{children:"*.guard.ts"})," and their class names end with ",(0,s.jsx)(r.code,{children:"*Guard"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["If ",(0,s.jsx)(r.code,{children:"canActivate()"})," returns:"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"true"})," or ",(0,s.jsx)(r.code,{children:"Promise<true>"}),", means Ditsmod will process the corresponding route with this guard;"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"false"})," or ",(0,s.jsx)(r.code,{children:"Promise<false>"}),", so the response to the request will contain a 401 status and the controller will not process the route;"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"number"})," or ",(0,s.jsx)(r.code,{children:"Promise<number>"})," is interpreted by Ditsmod as a status number (403, 401, etc.) that should be returned in response to an HTTP request."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"use-of-guards",children:"Use of guards"}),"\n",(0,s.jsxs)(r.p,{children:["The guards are passed to the controllers in the array in the third parameter of the ",(0,s.jsx)(r.code,{children:"route"})," decorator:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:"{6}",children:"import { controller, Res, route } from '@ditsmod/core';\nimport { AuthGuard } from './auth.guard.js';\n\n@controller()\nexport class SomeController {\n  @route('GET', 'some-url', [AuthGuard])\n  tellHello(res: Res) {\n    res.send('Hello, admin!');\n  }\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"guards-with-parameters",children:"Guards with parameters"}),"\n",(0,s.jsxs)(r.p,{children:["The guard in the ",(0,s.jsx)(r.code,{children:"canActivate()"})," method has two parameters. The arguments for the first parameter are automatically passed with the ",(0,s.jsx)(r.code,{children:"RequestContext"})," datatype, and the arguments for the second parameter can be passed to the ",(0,s.jsx)(r.code,{children:"route"})," decorator in an array where a certain guard comes first."]}),"\n",(0,s.jsx)(r.p,{children:"Let's consider such an example:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:"{8}",children:"import { controller, Res, route } from '@ditsmod/core';\n\nimport { PermissionsGuard } from './permissions.guard.js';\nimport { Permission } from './permission.js';\n\n@controller()\nexport class SomeController {\n  @route('GET', 'some-url', [[PermissionsGuard, Permission.canActivateAdministration]])\n  tellHello(res: Res) {\n    res.send('Hello, admin!');\n  }\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["As you can see, in place of the third parameter in ",(0,s.jsx)(r.code,{children:"route"}),", an array is passed in an array, where ",(0,s.jsx)(r.code,{children:"PermissionsGuard"})," is specified in the first place, followed by arguments for it. In this case, ",(0,s.jsx)(r.code,{children:"PermissionsGuard"})," will receive these arguments in its ",(0,s.jsx)(r.code,{children:"canActivate()"})," method:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:"{10}",children:"import { injectable, CanActivate, Status, RequestContext } from '@ditsmod/core';\n\nimport { AuthService } from './auth.service.js';\nimport { Permission } from './permission.js';\n\n@injectable()\nexport class PermissionsGuard implements CanActivate {\n  constructor(private authService: AuthService) {}\n\n  async canActivate(ctx: RequestContext, params?: Permission[]) {\n    if (await this.authService.hasPermissions(params)) {\n      return true;\n    } else {\n      return Status.FORBIDDEN;\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"helpers-for-guards-with-parameters",children:"Helpers for guards with parameters"}),"\n",(0,s.jsxs)(r.p,{children:["Because parameter guards must be passed as an array within an array, this makes readability and type safety worse. For such cases, it is better to create a helper using the ",(0,s.jsx)(r.code,{children:"createHelperForGuardWithParams()"})," factory:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:"{5}",children:"import { createHelperForGuardWithParams } from '@ditsmod/core';\nimport { Permission } from './types.js';\nimport { PermissionsGuard } from './permissions-guard.js';\n\nexport const requirePermissions = createHelperForGuardWithParams<Permission>(PermissionsGuard);\n"})}),"\n",(0,s.jsxs)(r.p,{children:["In this example, ",(0,s.jsx)(r.code,{children:"PermissionsGuard"})," is passed as an argument, which accepts parameters of type ",(0,s.jsx)(r.code,{children:"Permission"})," in its ",(0,s.jsx)(r.code,{children:"canActivate()"})," method."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"requirePermissions()"})," can now be used to create routes:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:"{8}",children:"import { controller, Res, route } from '@ditsmod/core';\n\nimport { requirePermissions } from '../auth/guards-utils.js';\nimport { Permission } from '../auth/types.js';\n\n@controller()\nexport class SomeController {\n  @route('GET', 'administration', [requirePermissions(Permission.canActivateAdministration)])\n  helloAdmin(res: Res) {\n    res.send('some secret');\n  }\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"passing-guards-to-injectors",children:"Passing guards to injectors"}),"\n",(0,s.jsx)(r.p,{children:"Guards can be passed in module or controller metadata:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:"{6}",children:"import { featureModule } from '@ditsmod/core';\n\nimport { AuthGuard } from 'auth.guard';\n\n@featureModule({\n  providersPerReq: [AuthGuard],\n})\nexport class SomeModule {}\n"})}),"\n",(0,s.jsx)(r.p,{children:"In this case, the guard will work at the request level, for non-singleton controllers."}),"\n",(0,s.jsx)(r.h2,{id:"setting-guards-on-the-imported-module",children:"Setting guards on the imported module"}),"\n",(0,s.jsx)(r.p,{children:"You can also centrally set guards at the module level:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:"{10}",children:"import { featureModule } from '@ditsmod/core';\n\nimport { OtherModule } from '../other/other.module.js';\nimport { AuthModule } from '../auth/auth.module.js';\nimport { AuthGuard } from '../auth/auth.guard.js';\n\n@featureModule({\n  imports: [\n    AuthModule,\n    { path: 'some-path', module: OtherModule, guards: [AuthGuard] }\n  ]\n})\nexport class SomeModule {}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["In this case, ",(0,s.jsx)(r.code,{children:"AuthGuard"})," will be automatically added to each route in ",(0,s.jsx)(r.code,{children:"OtherModule"}),"."]})]})}function u(e={}){const{wrapper:r}={...(0,n.RP)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},5680:(e,r,t)=>{t.d(r,{RP:()=>c});var s=t(6540);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);r&&(s=s.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,s)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,s,n=function(e,r){if(null==e)return{};var t,s,n={},o=Object.keys(e);for(s=0;s<o.length;s++)t=o[s],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)t=o[s],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var d=s.createContext({}),c=function(e){var r=s.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},l={inlineCode:"code",wrapper:function(e){var r=e.children;return s.createElement(s.Fragment,{},r)}},u=s.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,d=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(t),p=n,h=m["".concat(d,".").concat(p)]||m[p]||l[p]||o;return t?s.createElement(h,a(a({ref:r},u),{},{components:t})):s.createElement(h,a({ref:r},u))}));u.displayName="MDXCreateElement"}}]);