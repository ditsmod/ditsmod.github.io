"use strict";(self.webpackChunkditsmod_github_io=self.webpackChunkditsmod_github_io||[]).push([[211],{2019:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var i=n(4848),o=n(5680);const r={sidebar_position:21},a="@ditsmod/openapi-validation",s={id:"native-modules/openapi-validation",title:"@ditsmod/openapi-validation",description:"To provide automatic metadata-based validation in Ditsmod applications for OpenAPI, you can use the @ditsmod/openapi-validation module. Under the hood, this module has an integration with the ajv library, which directly performs the validation just mentioned.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/02-native-modules/21-openapi-validation.md",sourceDirName:"02-native-modules",slug:"/native-modules/openapi-validation",permalink:"/en/native-modules/openapi-validation",draft:!1,unlisted:!1,editUrl:"https://github.com/ditsmod/ditsmod/edit/main/website/i18n/en/docusaurus-plugin-content-docs/current/02-native-modules/21-openapi-validation.md",tags:[],version:"current",sidebarPosition:21,frontMatter:{sidebar_position:21},sidebar:"tutorialSidebar",previous:{title:"@ditsmod/openapi",permalink:"/en/native-modules/openapi"},next:{title:"@ditsmod/testing",permalink:"/en/native-modules/testing"}},d={},l=[{value:"Installation",id:"installation",level:2},{value:"Enable validation and set options",id:"enable-validation-and-set-options",level:2},{value:"Substituting of validation interceptors",id:"substituting-of-validation-interceptors",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.RP)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"ditsmodopenapi-validation",children:"@ditsmod/openapi-validation"}),"\n",(0,i.jsxs)(t.p,{children:["To provide automatic metadata-based validation in Ditsmod applications for OpenAPI, you can use the ",(0,i.jsx)(t.code,{children:"@ditsmod/openapi-validation"})," module. Under the hood, this module has an integration with the ",(0,i.jsx)(t.a,{href:"https://ajv.js.org/guide/getting-started.html",children:"ajv"})," library, which directly performs the validation just mentioned."]}),"\n",(0,i.jsxs)(t.p,{children:["Currently, automatic validation only works for HTTP requests that have a media type of ",(0,i.jsx)(t.code,{children:"application/json"})," and do not refer to ",(0,i.jsx)(t.a,{href:"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#referenceObject",children:"Reference Object"}),". Automatic validation works for parameters in:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"path"}),"\n",(0,i.jsx)(t.li,{children:"query"}),"\n",(0,i.jsx)(t.li,{children:"cookie"}),"\n",(0,i.jsx)(t.li,{children:"header"}),"\n",(0,i.jsx)(t.li,{children:"request's body."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(t.p,{children:["After you create ",(0,i.jsx)(t.a,{href:"/native-modules/openapi",children:"OpenAPI documentation"}),", you need to import two modules for automatic validation based on it:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm i @ditsmod/openapi-validation @ditsmod/i18n\n"})}),"\n",(0,i.jsx)(t.h2,{id:"enable-validation-and-set-options",children:"Enable validation and set options"}),"\n",(0,i.jsxs)(t.p,{children:["To enable automatic validation in a specific module, it is enough to import ",(0,i.jsx)(t.code,{children:"ValidationModule"})," there. You can also pass ",(0,i.jsx)(t.code,{children:"ValidationOptions"})," and ",(0,i.jsx)(t.code,{children:"AJV_OPTIONS"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"import { featureModule, Providers, Status } from '@ditsmod/core';\nimport { ValidationModule, ValidationOptions, AJV_OPTIONS } from '@ditsmod/openapi-validation';\nimport { Options } from 'ajv';\n\n@featureModule({\n  imports: [ValidationModule],\n  providersPerApp: [\n    ...new Providers()\n      .useValue<ValidationOptions>(ValidationOptions, { invalidStatus: Status.UNPROCESSABLE_ENTRY })\n      .useValue<Options>(AJV_OPTIONS, { allErrors: true })\n  ]\n  // ...\n})\nexport class SomeModule {}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"substituting-of-validation-interceptors",children:"Substituting of validation interceptors"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"ParametersInterceptor"})," and ",(0,i.jsx)(t.code,{children:"RequestBodyInterceptor"})," classes are responsible for validating the request body and request parameters. They can be substituted in the ",(0,i.jsx)(t.code,{children:"providersPerReq"})," array at the module or controller level:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"import { featureModule } from '@ditsmod/core';\nimport { ParametersInterceptor } from '@ditsmod/openapi-validation';\n\nimport { MyInterceptor } from './my.interceptor.js';\n\n@featureModule({\n  // ...\n  providersPerReq: [\n    { token: ParametersInterceptor, useClass: MyInterceptor }\n  ]\n  // ...\n})\nexport class SomeModule {}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Before writing your interceptor for validation, you can first review how is written, for example ",(0,i.jsx)(t.a,{href:"https://github.com/ditsmod/ditsmod/blob/main/packages/openapi-validation/src/parameters.interceptor.ts",children:"ParametersInterceptor"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,o.RP)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},5680:(e,t,n)=>{n.d(t,{RP:()=>l});var i=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=i.createContext({}),l=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,h=u["".concat(d,".").concat(m)]||u[m]||c[m]||r;return n?i.createElement(h,a(a({ref:t},p),{},{components:n})):i.createElement(h,a({ref:t},p))}));p.displayName="MDXCreateElement"}}]);