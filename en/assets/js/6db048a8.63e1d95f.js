"use strict";(self.webpackChunkditsmod_github_io=self.webpackChunkditsmod_github_io||[]).push([[192],{6277:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>a});var r=o(4848),t=o(5680);const s={sidebar_position:1},i="@ditsmod/body-parser",d={id:"native-modules/body-parser",title:"@ditsmod/body-parser",description:"This module adds an interceptor for parsing the request body to all routes that have the HTTP methods specified in bodyParserConfig.acceptMethods, by default it is:",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/02-native-modules/01-body-parser.md",sourceDirName:"02-native-modules",slug:"/native-modules/body-parser",permalink:"/en/native-modules/body-parser",draft:!1,unlisted:!1,editUrl:"https://github.com/ditsmod/ditsmod/edit/main/website/i18n/en/docusaurus-plugin-content-docs/current/02-native-modules/01-body-parser.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"@ditsmod/routing",permalink:"/en/native-modules/routing"},next:{title:"@ditsmod/session-cookie",permalink:"/en/native-modules/session-cookie"}},l={},a=[{value:"Installation",id:"installation",level:2},{value:"Importing",id:"importing",level:2},{value:"Usage",id:"usage",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.RP)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"ditsmodbody-parser",children:"@ditsmod/body-parser"}),"\n",(0,r.jsxs)(n.p,{children:["This module adds an interceptor for parsing the request body to all routes that have the HTTP methods specified in ",(0,r.jsx)(n.code,{children:"bodyParserConfig.acceptMethods"}),", by default it is:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"POST"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"PUT"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"PATCH"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The following data types are supported:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"application/json"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"application/x-www-form-urlencoded"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"text/plain"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"text/html"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This module does not parse the request body when uploading files, for this you can use the third-party module ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/@ts-stack/multiparty",children:"@ts-stack/multiparty"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm i @ditsmod/body-parser\n"})}),"\n",(0,r.jsx)(n.h2,{id:"importing",children:"Importing"}),"\n",(0,r.jsxs)(n.p,{children:["To enable ",(0,r.jsx)(n.code,{children:"@ditsmod/body-parser"})," globally, you need to import and export ",(0,r.jsx)(n.code,{children:"BodyParserModule"})," in the root module:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { rootModule } from '@ditsmod/core';\nimport { BodyParserModule } from '@ditsmod/body-parser';\n\n@rootModule({\n  imports: [\n    BodyParserModule,\n    // ...\n  ],\n  exports: [BodyParserModule]\n})\nexport class AppModule {}\n"})}),"\n",(0,r.jsx)(n.p,{children:"In this case, the default settings will work. If you need to change some options, you can do it as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"{4}",children:"import { rootModule } from '@ditsmod/core';\nimport { BodyParserModule } from '@ditsmod/body-parser';\n\nconst moduleWithBodyParserConfig = BodyParserModule.withParams({ maxBodySize: 1024 * 1024 });\n\n@rootModule({\n  imports: [\n    moduleWithBodyParserConfig,\n    // ...\n  ],\n  exports: [moduleWithBodyParserConfig]\n})\nexport class AppModule {}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Another option for passing the configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { rootModule, Providers } from '@ditsmod/core';\nimport { BodyParserModule, BodyParserConfig } from '@ditsmod/body-parser';\n\n@rootModule({\n  imports: [\n    BodyParserModule,\n    // ...\n  ],\n  providersPerApp: [\n    ...new Providers()\n      .useValue<BodyParserConfig>(BodyParserConfig,  { maxBodySize: 1024*1024 })\n  ],\n  exports: [BodyParserModule]\n})\nexport class AppModule {}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:["Depending on whether the controller is ",(0,r.jsx)(n.a,{href:"/components-of-ditsmod-app/controllers-and-services/#what-is-a-controller",children:"singleton"})," or not, the result of the interceptor can be obtained in two ways:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["If the controller is non-singleton, the result can be obtained using the ",(0,r.jsx)(n.code,{children:"HTTP_BODY"})," token:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"{11}",children:"import { controller, Res, route, inject } from '@ditsmod/core';\nimport { HTTP_BODY } from '@ditsmod/body-parser';\n\ninterface Body {\n  one: number;\n}\n\n@controller()\nexport class SomeController {\n  @route('POST')\n  ok(@inject(HTTP_BODY) body: Body, res: Res) {\n    res.sendJson(body);\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"If the controller is singleton, the result can be obtained from the context:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"{6}",children:"import { controller, route, SingletonRequestContext } from '@ditsmod/core';\n\n@controller({ isSingleton: true })\nexport class SomeController {\n  @route('POST')\n  ok(ctx: SingletonRequestContext) {\n    const bodyStr = JSON.stringify(ctx.body);\n    ctx.nodeRes.end(bodyStr);\n  }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.RP)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},5680:(e,n,o)=>{o.d(n,{RP:()=>a});var r=o(6540);function t(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function s(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?s(Object(o),!0).forEach((function(n){t(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function d(e,n){if(null==e)return{};var o,r,t=function(e,n){if(null==e)return{};var o,r,t={},s=Object.keys(e);for(r=0;r<s.length;r++)o=s[r],n.indexOf(o)>=0||(t[o]=e[o]);return t}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)o=s[r],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var l=r.createContext({}),a=function(e){var n=r.useContext(l),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var o=e.components,t=e.mdxType,s=e.originalType,l=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),u=a(o),m=t,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||s;return o?r.createElement(h,i(i({ref:n},p),{},{components:o})):r.createElement(h,i({ref:n},p))}));p.displayName="MDXCreateElement"}}]);