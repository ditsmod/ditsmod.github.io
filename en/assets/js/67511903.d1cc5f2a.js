"use strict";(self.webpackChunkditsmod_github_io=self.webpackChunkditsmod_github_io||[]).push([[293],{1429:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"components-of-ditsmod-app/init-decorators","title":"Init Decorators and Init Hooks","description":"Init decorators are applied to module classes to pass metadata with extended data types. Init decorators can serve three roles:","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/00-components-of-ditsmod-app/13-init-decorators.md","sourceDirName":"00-components-of-ditsmod-app","slug":"/components-of-ditsmod-app/init-decorators","permalink":"/en/components-of-ditsmod-app/init-decorators","draft":false,"unlisted":false,"editUrl":"https://github.com/ditsmod/ditsmod/edit/main/website/i18n/en/docusaurus-plugin-content-docs/current/00-components-of-ditsmod-app/13-init-decorators.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"tutorialSidebar","previous":{"title":"Providers helper","permalink":"/en/components-of-ditsmod-app/providers-helper"},"next":{"title":"Export, import, append","permalink":"/en/developer-guides/exports-and-imports"}}');var a=o(4848),i=o(8453);const r={sidebar_position:13},s="Init Decorators and Init Hooks",d={},c=[];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"init-decorators-and-init-hooks",children:"Init Decorators and Init Hooks"})}),"\n",(0,a.jsx)(t.p,{children:"Init decorators are applied to module classes to pass metadata with extended data types. Init decorators can serve three roles:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["As a decorator for the root module (extending the data type passed to the ",(0,a.jsx)(t.code,{children:"rootModule"})," decorator). For example, ",(0,a.jsx)(t.code,{children:"restRootModule"})," is an init decorator that can receive metadata with an extended data type."]}),"\n",(0,a.jsxs)(t.li,{children:["As a decorator for a feature module (extending the data type passed to the ",(0,a.jsx)(t.code,{children:"featureModule"})," decorator). For example, ",(0,a.jsx)(t.code,{children:"restModule"})," is an init decorator that can receive metadata with an extended data type."]}),"\n",(0,a.jsxs)(t.li,{children:["As a decorator for extending either the root module or a feature module. In this case, it is recommended to name the decorator with the ",(0,a.jsx)(t.code,{children:"init*"})," prefix, for example ",(0,a.jsx)(t.code,{children:"initRest"}),", ",(0,a.jsx)(t.code,{children:"initTrpc"}),", ",(0,a.jsx)(t.code,{children:"initGraphql"}),", etc. In this role, multiple init decorators can be applied to a single module class."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Since init decorators accept module metadata with an extended type, they must be able to normalize and validate this metadata. This can be achieved through ",(0,a.jsx)(t.strong,{children:"init hooks"}),", which are passed into transformers during the creation of class decorators. Each transformer used for an init decorator must return an instance of a class that extends ",(0,a.jsx)(t.code,{children:"InitHooks"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",metastring:"{12,16}",children:"import { InitHooks, InitDecorator, makeClassDecorator } from '@ditsmod/core';\n// ...\n\n// The methods of this class will normalize and validate the module metadata\nclass SomeInitHooks extends InitHooks<SomeInitRawMeta> {\n  // ...\n}\n\n// Init decorator transformer\nfunction getInitHooks(data?: RawMetadata): InitHooks<RawMetadata> {\n  const metadata = Object.assign({}, data);\n  const initHooks = new SomeInitHooks(metadata);\n  initHooks.moduleRole = undefined;\n  // OR initHooks.moduleRole = 'root';\n  // OR initHooks.moduleRole = 'feature';\n  return initHooks;\n}\n\n// Creating the init decorator\nconst initSome: InitDecorator<RawMetadata, InitParams, InitMeta> = makeClassDecorator(getInitHooks);\n"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://github.com/ditsmod/ditsmod/blob/168a9fe0712b5bedc5649908c4ada5158c956174/packages/core/src/init/module-normalizer.spec.ts#L282-L475",children:"A ready-made example of creating an init decorator"})," can be found in the Ditsmod repository tests. In addition, you can check out a more complex but also more complete example of ",(0,a.jsx)(t.a,{href:"https://github.com/ditsmod/ditsmod/blob/168a9fe0712b5bedc5649908c4ada5158c956174/packages/rest/src/decorators/rest-init-hooks-and-metadata.ts",children:"creating init decorators (restRootModule, restModule, and initRest)"}),", which are located in the ",(0,a.jsx)(t.code,{children:"@ditsmod/rest"})," module."]}),"\n",(0,a.jsx)(t.admonition,{type:"warning",children:(0,a.jsxs)(t.p,{children:["If you can easily pass metadata to a module using a ",(0,a.jsx)(t.a,{href:"/developer-guides/exports-and-imports/#ModuleWithParams",children:"module with parameters"}),", then creating an init decorator is not recommended. That is, whenever you want to create an init decorator, first consider using a ",(0,a.jsx)(t.a,{href:"/developer-guides/exports-and-imports/#ModuleWithParams",children:"module with parameters"}),"."]})})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>s});var n=o(6540);const a={},i=n.createContext(a);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);