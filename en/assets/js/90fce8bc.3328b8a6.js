"use strict";(self.webpackChunkditsmod_github_io=self.webpackChunkditsmod_github_io||[]).push([[585],{5550:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=t(3117),r=(t(7294),t(3905));const a={},i="04-logger",l={unversionedId:"examples/logger",id:"examples/logger",title:"04-logger",description:"To try this example, you should first prepare the prerequisite.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/10-examples/04-logger.md",sourceDirName:"10-examples",slug:"/examples/logger",permalink:"/en/examples/logger",draft:!1,editUrl:"https://github.com/ditsmod/ditsmod/edit/main/website/i18n/en/docusaurus-plugin-content-docs/current/10-examples/04-logger.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"03-route-guards",permalink:"/en/examples/route-guards"},next:{title:"05-nested-routes",permalink:"/en/examples/nested-routes"}},s={},p=[{value:"SomeModule",id:"somemodule",level:2},{value:"BunyanModule",id:"bunyanmodule",level:2},{value:"PinoModule",id:"pinomodule",level:2},{value:"WinstonModule",id:"winstonmodule",level:2}],u={toc:p};function g(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"04-logger"},"04-logger"),(0,r.kt)("p",null,"To try this example, you should first ","[prepare the prerequisite][1]","."),(0,r.kt)("p",null,"This example shows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"how can you have several different loggers in one application at the same time;"),(0,r.kt)("li",{parentName:"ul"},"how to configure each of the loggers for compatibility with Ditsmod;"),(0,r.kt)("li",{parentName:"ul"},"how to set different log levels for the application or separately for the module.")),(0,r.kt)("p",null,"Work with the following four loggers is demonstrated:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ConsoleLogger")," is by default a logger that can be used for application development;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/trentm/node-bunyan"},"bunyan"),";"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/pinojs/pino"},"pino"),";"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/winstonjs/winston"},"winston"),".")),(0,r.kt)("p",null,"In practice, it is unlikely that you will need more than one logger, but in this example it will be useful to look at the operation of the hierarchical DI architecture, the export/import rules of providers, the mechanism for substitute a by default logger and a by default configuration for the logger."),(0,r.kt)("p",null,"You can run the application from the first terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn start4\n")),(0,r.kt)("p",null,"From the second terminal, check the work:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -isS localhost:3000\ncurl -isS localhost:3000/pino\ncurl -isS localhost:3000/winston\ncurl -isS localhost:3000/bunyan\n")),(0,r.kt)("h2",{id:"somemodule"},"SomeModule"),(0,r.kt)("p",null,"The easiest way to configure by default the logger that works in ",(0,r.kt)("inlineCode",{parentName:"p"},"SomeController"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Logger } from '@ditsmod/core';\n// ...\n  constructor(private logger: Logger) {}\n// ...\n}\n")),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," in the constructor, the by default logger is essentially requested from DI, since there is no substitution for another logger in ",(0,r.kt)("inlineCode",{parentName:"p"},"SomeModule"),". At the same time, ",(0,r.kt)("inlineCode",{parentName:"p"},"SomeModule")," has a substitution for ",(0,r.kt)("inlineCode",{parentName:"p"},"LoggerConfig")," and the log level has been changed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { LoggerConfig, Providers } from '@ditsmod/core';\n\n// ...\n  providersPerMod: [\n    ...new Providers().useLogConfig({ level: 'trace' })\n  ],\n// ...\n")),(0,r.kt)("p",null,"Because of this, all loggers within ",(0,r.kt)("inlineCode",{parentName:"p"},"SomeModule")," will output information at the ",(0,r.kt)("inlineCode",{parentName:"p"},"trace")," level."),(0,r.kt)("h2",{id:"bunyanmodule"},"BunyanModule"),(0,r.kt)("p",null,"To request ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/trentm/node-bunyan"},"bunyan")," in the controller, the class imported from ",(0,r.kt)("inlineCode",{parentName:"p"},"bunyan")," is used by default:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import BunyanLogger from 'bunyan';\n// ...\n  constructor(private logger: BunyanLogger) {}\n// ...\n")),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"BunyanLogger")," is actually a ",(0,r.kt)("strong",{parentName:"p"},"class"),", not an interface or anonymous function, because DI would not work with an interface or anonymous function. But in order for DI to issue the corresponding logger using the ",(0,r.kt)("inlineCode",{parentName:"p"},"BunyanLogger")," token, the following settings can be made in the module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createLogger } from 'bunyan';\n\nconst logger = createLogger({ name: 'bunyan-test' });\n  // ...\n  providersPerMod: [\n    { token: Logger, useValue: logger },\n    { token: BunyanLogger, useToken: Logger }\n  ],\n  // ...\n")),(0,r.kt)("p",null,"In essence, an object with the ",(0,r.kt)("inlineCode",{parentName:"p"},"useToken"),' property says: "When the DI is queried for a provider by the ',(0,r.kt)("inlineCode",{parentName:"p"},"BunyanLogger")," token, the corresponding value must be searched for by the ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger"),' token." That is, in fact, the second element of the array refers to the first element of the array.'),(0,r.kt)("p",null,"Let's go further. At this stage of configuration, in any controller within a ",(0,r.kt)("inlineCode",{parentName:"p"},"BunyanModule"),", a ",(0,r.kt)("inlineCode",{parentName:"p"},"bunyan")," instance can be issued by both a ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," token and a ",(0,r.kt)("inlineCode",{parentName:"p"},"BunyanLogger")," token. By the way, it could be done more simply, instead of two instructions for DI, you could pass one instruction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createLogger } from 'bunyan';\n\nconst logger = createLogger({ name: 'bunyan-test' });\n  // ...\n  providersPerMod: [\n    { token: BunyanLogger, useValue: logger },\n  ],\n  // ...\n")),(0,r.kt)("p",null,"In this case, within the limits of ",(0,r.kt)("inlineCode",{parentName:"p"},"BunyanModule"),", DI would issue ",(0,r.kt)("inlineCode",{parentName:"p"},"ConsoleLogger")," on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," token, and a native instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"bunyan")," would issue on the ",(0,r.kt)("inlineCode",{parentName:"p"},"BunyanLogger")," token. This is a slightly worse option, because under the hood Ditsmod uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," token to work with the logger, so all syslogs will be written using ",(0,r.kt)("inlineCode",{parentName:"p"},"ConsoleLogger"),", which in most cases is only suitable for development, not for production mode."),(0,r.kt)("p",null,"Let's go back to our previous (correct) setup where a ",(0,r.kt)("inlineCode",{parentName:"p"},"bunyan")," instance can be issued by both a ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," token and a ",(0,r.kt)("inlineCode",{parentName:"p"},"BunyanLogger")," token. Now it remains for us to make the ",(0,r.kt)("inlineCode",{parentName:"p"},"bunyan")," instance compatible with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," class interface, that is, we need to add ",(0,r.kt)("inlineCode",{parentName:"p"},"log()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"getLevel()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"setLevel()")," methods to the ",(0,r.kt)("inlineCode",{parentName:"p"},"bunyan")," instance. This is best done in a separate ",(0,r.kt)("inlineCode",{parentName:"p"},"patchLogger()")," function, which can then be passed to DI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Logger, LoggerConfig, featureModule } from '@ditsmod/core';\nimport BunyanLogger from 'bunyan';\n\nimport { patchLogger } from './patch-logger';\n\n@featureModule({\n  // ...\n  providersPerMod: [\n    { token: Logger, useFactory: patchLogger, deps: [LoggerConfig] }\n    { token: BunyanLogger, useToken: Logger }\n  ],\n})\nexport class BunyanModule {}\n")),(0,r.kt)("p",null,"DI will call ",(0,r.kt)("inlineCode",{parentName:"p"},"patchLogger()")," on the first ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," request and pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"LoggerConfig")," instance (which we specified in the ",(0,r.kt)("inlineCode",{parentName:"p"},"deps")," array as a dependency) as the first argument."),(0,r.kt)("h2",{id:"pinomodule"},"PinoModule"),(0,r.kt)("p",null,"In Ditsmod, the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pinojs/pino"},"pino")," logger is configured similarly to ",(0,r.kt)("inlineCode",{parentName:"p"},"bunyan"),", except for the token for DI. The fact is that currently the ",(0,r.kt)("inlineCode",{parentName:"p"},"pino")," library only has an interface for its logger, and for DI it would be better to have a class instead of an interface. Therefore, we cannot use the ",(0,r.kt)("inlineCode",{parentName:"p"},"useToken")," property on the provider object. In this case, you need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"@inject")," in the constructor of the controller or service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { inject } from '@ditsmod/core';\nimport { Logger } from '@ditsmod/core';\nimport { BaseLogger as PinoLogger } from 'pino';\n// ...\n  constructor(@inject(Logger) private logger: PinoLogger) {}\n")),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"LoggerConfig")," is not passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"PinoModule")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"BunyanModule")," for DI, so these modules will default to the information output level (",(0,r.kt)("inlineCode",{parentName:"p"},"info"),")."),(0,r.kt)("h2",{id:"winstonmodule"},"WinstonModule"),(0,r.kt)("p",null,"In this Ditsmod application, the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/winstonjs/winston"},"winston")," logger is configured similarly to ",(0,r.kt)("inlineCode",{parentName:"p"},"pino"),", but ",(0,r.kt)("inlineCode",{parentName:"p"},"winston")," has additional settings. Also, by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"LoggerConfig"),", within ",(0,r.kt)("inlineCode",{parentName:"p"},"WinstonModule"),", the output level will be changed to ",(0,r.kt)("inlineCode",{parentName:"p"},"debug"),"."))}g.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,c=d["".concat(s,".").concat(m)]||d[m]||g[m]||a;return t?o.createElement(c,i(i({ref:n},u),{},{components:t})):o.createElement(c,i({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);