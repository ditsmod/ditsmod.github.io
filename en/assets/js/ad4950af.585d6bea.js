"use strict";(self.webpackChunkditsmod_github_io=self.webpackChunkditsmod_github_io||[]).push([[247],{6269:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"native-modules/rest","title":"@ditsmod/rest","description":"As the name suggests, the @ditsmod/rest module provides support for REST. It includes:","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/02-native-modules/00-rest.md","sourceDirName":"02-native-modules","slug":"/native-modules/rest","permalink":"/en/native-modules/rest","draft":false,"unlisted":false,"editUrl":"https://github.com/ditsmod/ditsmod/edit/main/website/i18n/en/docusaurus-plugin-content-docs/current/02-native-modules/00-rest.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0},"sidebar":"tutorialSidebar","previous":{"title":"Testing","permalink":"/en/developer-guides/testing"},"next":{"title":"@ditsmod/trpc","permalink":"/en/native-modules/trpc"}}');var o=n(4848),r=n(8453);const i={sidebar_position:0},d="@ditsmod/rest",a={},l=[{value:"Installation and importing",id:"installation-and-importing",level:2},{value:"Custom router integration",id:"custom-router-integration",level:2},{value:"Extensions group <code>ROUTES_EXTENSIONS</code>",id:"extensions-group-routes_extensions",level:2},{value:"Extensions group <code>PRE_ROUTER_EXTENSIONS</code>",id:"extensions-group-pre_router_extensions",level:2}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"ditsmodrest",children:"@ditsmod/rest"})}),"\n",(0,o.jsxs)(t.p,{children:["As the name suggests, the ",(0,o.jsx)(t.code,{children:"@ditsmod/rest"})," module provides support for ",(0,o.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/REST",children:"REST"}),". It includes:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"/components-of-ditsmod-app/init-decorators/",children:"init decorators"})," for the root module and the feature module - ",(0,o.jsx)(t.code,{children:"restRootModule"}),", ",(0,o.jsx)(t.code,{children:"restModule"}),";"]}),"\n",(0,o.jsxs)(t.li,{children:["extensions that provide REST route creation - ",(0,o.jsx)(t.code,{children:"RoutesExtension"}),", ",(0,o.jsx)(t.code,{children:"PreRouterExtension"}),";"]}),"\n",(0,o.jsx)(t.li,{children:"a router of the following type:"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"interface Router {\n  on(method: HttpMethod, path: string, handle: RouteHandler): this;\n  all(path: string, handle: RouteHandler): this;\n  find(method: HttpMethod, path: string): RouterReturns;\n}\n\ntype RouteHandler = (\n  rawReq: RawRequest,\n  rawRes: RawResponse,\n  params: PathParam[],\n  queryString: any\n) => Promise<void>;\n\nclass RouterReturns {\n  handle: RouteHandler | null;\n  params: PathParam[] | null;\n}\n\ninterface PathParam {\n  key: string;\n  value: string;\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["A ready-made example of using this module can be found in the examples ",(0,o.jsx)(t.a,{href:"https://github.com/ditsmod/ditsmod/tree/main/examples/01-hello-world",children:"Ditsmod repository"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"installation-and-importing",children:"Installation and importing"}),"\n",(0,o.jsx)(t.p,{children:"Installation:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"npm i @ditsmod/rest\n"})}),"\n",(0,o.jsx)(t.p,{children:"Importing:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"import { restModule } from '@ditsmod/rest';\n\n@restModule({\n  // ..\n})\nexport class AppModule {}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"custom-router-integration",children:"Custom router integration"}),"\n",(0,o.jsxs)(t.p,{children:["If you want to integrate a custom router for the Ditsmod application, it is enough for your router to implement the above ",(0,o.jsx)(t.code,{children:"Router"})," interface, after which it can be added to the providers at the application level:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"import { restModule, Router } from '@ditsmod/rest';\nimport { MyRouter } from './my-router.js';\n\n@restModule({\n  providersPerApp: [{ token: Router, useClass: MyRouter }],\n})\nexport class MyCustomRouterModule {}\n"})}),"\n",(0,o.jsxs)(t.h2,{id:"extensions-group-routes_extensions",children:["Extensions group ",(0,o.jsx)(t.code,{children:"ROUTES_EXTENSIONS"})]}),"\n",(0,o.jsxs)(t.p,{children:["The extensions group token ",(0,o.jsx)(t.code,{children:"ROUTES_EXTENSIONS"})," is exported from this module. Extensions from this group return metadata with interface ",(0,o.jsx)(t.a,{href:"https://github.com/ditsmod/ditsmod/blob/core-2.54.0/packages/core/src/types/metadata-per-mod.ts#L58-L74",children:(0,o.jsx)(t.code,{children:"Array<MetadataPerMod3>"})})," is an array of dynamic metadata that is intended for creating request handlers. Each item of this array is a separate route."]}),"\n",(0,o.jsxs)(t.h2,{id:"extensions-group-pre_router_extensions",children:["Extensions group ",(0,o.jsx)(t.code,{children:"PRE_ROUTER_EXTENSIONS"})]}),"\n",(0,o.jsxs)(t.p,{children:["The extensions group token ",(0,o.jsx)(t.code,{children:"PRE_ROUTER_EXTENSIONS"})," is also exported from this module. An extension from this group uses the metadata returned by the ",(0,o.jsx)(t.code,{children:"ROUTES_EXTENSIONS"})," extension group to create HTTP request handlers."]})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var s=n(6540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);