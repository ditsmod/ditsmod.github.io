"use strict";(self.webpackChunkditsmod_github_io=self.webpackChunkditsmod_github_io||[]).push([[207],{9054:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"components-of-ditsmod-app/providers-helper","title":"Providers helper","description":"This class simplifies the addition of providers to DI while simultaneously controlling their types. Since this class implements the so-called Iteration protocols, it facilitates the conversion of itself into an array (note the spread operator):","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/00-components-of-ditsmod-app/12-providers-helper.md","sourceDirName":"00-components-of-ditsmod-app","slug":"/components-of-ditsmod-app/providers-helper","permalink":"/en/components-of-ditsmod-app/providers-helper","draft":false,"unlisted":false,"editUrl":"https://github.com/ditsmod/ditsmod/edit/main/website/i18n/en/docusaurus-plugin-content-docs/current/00-components-of-ditsmod-app/12-providers-helper.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_position":12},"sidebar":"tutorialSidebar","previous":{"title":"ModuleManager","permalink":"/en/components-of-ditsmod-app/module-manager"},"next":{"title":"Export, import, append","permalink":"/en/developer-guides/exports-and-imports"}}');var n=s(4848),i=s(8453);const t={sidebar_position:12},d="Providers helper",l={},a=[];function c(e){const o={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.header,{children:(0,n.jsx)(o.h1,{id:"providers-helper",children:"Providers helper"})}),"\n",(0,n.jsxs)(o.p,{children:["This class simplifies the addition of providers to DI while simultaneously controlling their types. Since this class implements the so-called ",(0,n.jsx)(o.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols",children:"Iteration protocols"}),", it facilitates the conversion of itself into an array (note the spread operator):"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ts",metastring:"{8}",children:"import { featureModule, Providers } from '@ditsmod/core';\n// ...\n@featureModule({\n  // ...\n  providersPerRou: [\n    Provider1,\n    Provider2,\n    ...new Providers().useValue<CorsOptions>(CorsOptions, { origin: 'https://example.com' }),\n    // ...\n  ],\n  // ...\n})\nexport class SomeModule {}\n"})}),"\n",(0,n.jsxs)(o.p,{children:["Starting from v2.55, Ditsmod allows passing an instance of ",(0,n.jsx)(o.code,{children:"Providers"})," directly into the ",(0,n.jsx)(o.code,{children:"providersPer*"})," properties of the module or controller metadata:"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ts",children:"import { featureModule, Providers } from '@ditsmod/core';\n// ...\n@featureModule({\n  // ...\n  providersPerRou: new Providers()\n    .passThrough(Provider1)\n    .passThrough(Provider2)\n    .useValue<CorsOptions>(CorsOptions, { origin: 'https://example.com' }),\n  // ...\n})\nexport class SomeModule {}\n"})}),"\n",(0,n.jsxs)(o.p,{children:["The ",(0,n.jsx)(o.code,{children:"providers.passThrough()"})," method allows providers to be passed without type checking; it is intended for passing classes as providers."]}),"\n",(0,n.jsxs)(o.p,{children:["In addition, ",(0,n.jsx)(o.code,{children:"Providers"})," has a special method ",(0,n.jsx)(o.code,{children:"$if()"}),", which allows providers to be passed only if it receives a truthy value:"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ts",metastring:"{7}",children:"import { featureModule, Providers } from '@ditsmod/core';\n// ...\n@featureModule({\n  // ...\n  providersPerRou: new Providers()\n    .passThrough(Provider1)\n    .$if(false)\n    .passThrough(Provider2)\n    .passThrough(Provider3),\n  // ...\n})\nexport class SomeModule {}\n"})}),"\n",(0,n.jsxs)(o.p,{children:["In this case, ",(0,n.jsx)(o.code,{children:"Provider2"})," will not be passed to DI, while ",(0,n.jsx)(o.code,{children:"Provider1"})," and ",(0,n.jsx)(o.code,{children:"Provider3"})," will be passed. That is, ",(0,n.jsx)(o.code,{children:"$if()"})," applies only to the first expression immediately following it."]}),"\n",(0,n.jsxs)(o.p,{children:["The ",(0,n.jsx)(o.code,{children:"providers.$use()"})," method allows creating plugins (or middlewares) to extend the functionality of ",(0,n.jsx)(o.code,{children:"Providers"}),":"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ts",metastring:"{2,11,21-22}",children:"class Plugin1 extends Providers {\n  method1() {\n    if (this.true) {\n      // ...\n    }\n    return this.self;\n  }\n}\n\nclass Plugin2 extends Providers {\n  method2() {\n    if (this.true) {\n      // ...\n    }\n    return this.self;\n  }\n}\n\nconst providers = [...new Providers()\n  .$use(Plugin1, Plugin2)\n  .method1()\n  .method2()\n  .useLogConfig({ level: 'trace' })\n  .useClass(SomeService, ExtendedService)];\n"})})]})}function p(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,o,s)=>{s.d(o,{R:()=>t,x:()=>d});var r=s(6540);const n={},i=r.createContext(n);function t(e){const o=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function d(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),r.createElement(i.Provider,{value:o},e.children)}}}]);